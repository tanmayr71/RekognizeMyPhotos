AWSTemplateFormatVersion: '2010-09-09'
Description: Photo Album Web Application Infrastructure

Resources:
  # S3 Bucket
  PhotoBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "photobucket-assignmentt"

  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "frontend-buckett"

  # Elasticsearch Domain
  ElasticsearchDomain:
    Type: AWS::Elasticsearch::Domain
    Properties:
      ElasticsearchVersion: "7.1"
      DomainName: "myes-albumttt"
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 10 # Specify the volume size required for your use case.
        VolumeType: "gp2" # General purpose SSD, or specify another type if needed.
      ElasticsearchClusterConfig:
        InstanceType: "t2.small.elasticsearch"

  # IAM Role for Lambda Functions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: ['logs:*', 'es:*', 's3:*']
                Resource: '*'

  # Lambda Functions
  IndexPhotosFunction11:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "IndexPhotosFunction11"
      Runtime: "python3.11"
      Handler: "index.handler"
      Code:
        S3Bucket: "b1-cdpipe"
        S3Key: "lambda_function_1.zip"
      Role: !GetAtt LambdaExecutionRole.Arn

  SearchPhotosFunction11:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "SearchPhotosFunction11"
      Runtime: "python3.11"
      Handler: "search.handler"
      Code:
        S3Bucket: "b1-cdpipe"
        S3Key: "lambda_function_2.zip"
      Role: !GetAtt LambdaExecutionRole.Arn

  # API Gateway
  AssignmentPhotoAPII:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "AssignmentPhotoAPII"
      Description: "API for photo album application"

  # /search resource
  SearchResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref AssignmentPhotoAPII
      ParentId: !GetAtt AssignmentPhotoAPII.RootResourceId
      PathPart: search

  # GET method on /search
  SearchGETMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref AssignmentPhotoAPII
      ResourceId: !Ref SearchResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchPhotosFunction11.Arn}/invocations"
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true

  # OPTIONS method on /search
  SearchOPTIONSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref AssignmentPhotoAPII
      ResourceId: !Ref SearchResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchPhotosFunction11.Arn}/invocations"
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true

  # /upload resource
  UploadResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref AssignmentPhotoAPII
      ParentId: !GetAtt AssignmentPhotoAPII.RootResourceId
      PathPart: upload

  # OPTIONS method on /upload
  UploadOPTIONSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref AssignmentPhotoAPII
      ResourceId: !Ref UploadResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true

  # /{object} resource
  ObjectResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref AssignmentPhotoAPII
      ParentId: !Ref UploadResource
      PathPart: '{object}'

  # PUT method on /{object}
# PUT method on /{object} with MOCK integration
  ObjectPUTMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref AssignmentPhotoAPII
      ResourceId: !Ref ObjectResource
      HttpMethod: PUT
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: "{}"
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"

  # OPTIONS method on /{object}
  ObjectOPTIONSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref AssignmentPhotoAPII
      ResourceId: !Ref ObjectResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: ""
            ResponseParameters:
              method.response.header.Access-Control-Allow-Methods: "'PUT,OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-amz-meta-customLabels'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Origin: true
Outputs:
  FrontendBucketName:
    Value: !Ref FrontendBucket
  PhotoBucketName:
    Value: !Ref PhotoBucket
  ElasticsearchDomainEndpoint:
    Value: !GetAtt ElasticsearchDomain.DomainEndpoint
  IndexPhotosFunction11Arn:
    Value: !GetAtt IndexPhotosFunction11.Arn
  SearchPhotosFunction11Arn:
    Value: !GetAtt SearchPhotosFunction11.Arn
  AssignmentPhotoAPIUrl:
    Value: !Sub "https://${AssignmentPhotoAPII}.execute-api.${AWS::Region}.amazonaws.com/Prod"
